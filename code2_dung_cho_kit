/*
 * Tải tài nguyên
 * ------------------------------------------------------------------------
 * Preferences--> Aditional boards Manager URLs : 
 * Đối với ESP8266 và NodeMCU - Phiên bản 3.0.2
 * http://arduino.esp8266.com/stable/package_esp8266com_index.json
 * ------------------------------------------------------------------------
 */

#include <SPI.h>
#include <MFRC522.h>
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <WiFiClientSecureBearSSL.h>

//-----------------------------------------
#define RST_PIN  D3
#define SS_PIN   D4
#define BUZZER   D2
//-----------------------------------------
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status;      
//-----------------------------------------
/* Lưu ý về Sector Trailer Blocks */
int blockNum = 2;  
/* Tạo mảng khác để đọc dữ liệu từ Block */
/* Độ dài của bộ đệm nên là 2 byte nhiều hơn kích thước của Block (16 Bytes) */
byte bufferLen = 18;
byte readBlockData[18];
//-----------------------------------------
String card_holder_name;
const String sheet_url = "?name=";
//-----------------------------------------

const uint8_t fingerprint[20] = {0x22, 0xD6, 0x3F, 0x7A, 0xCA, 0x1E, 0x3B, 0x04, 0x40, 0x02, 0xA1, 0xAF, 0x49, 0xB4, 0x02, 0x8E, 0x8D, 0x0E, 0xF9, 0x43};

//-----------------------------------------
#define WIFI_SSID "kmani"
#define WIFI_PASSWORD "123456789"
//-----------------------------------------

/**
 ****************************************************************************************************/
void setup()
{
  
  /* Khởi tạo giao tiếp serial với PC */
  Serial.begin(9600);
  //Serial.setDebugOutput(true);
 
  // Kết nối WiFi
  Serial.println();
  Serial.print("Đang kết nối tới AP");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(200);
  }
  Serial.println("");
  Serial.println("WiFi đã kết nối.");
  Serial.println("Địa chỉ IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  
  /* Đặt BUZZER làm OUTPUT */
  pinMode(BUZZER, OUTPUT);
 
  /* Khởi tạo bus SPI */
  SPI.begin();
  //--------------------------------------------------
}

/*
 * Hàm loop()
 */
 void loop()
{
  //--------------------------------------------------
  /* Khởi tạo Module MFRC522 */
  mfrc522.PCD_Init();
  /* Tìm kiếm thẻ mới */
  /* Đặt lại vòng lặp nếu không có thẻ mới xuất hiện trên đầu đọc RC522 */
  if (!mfrc522.PICC_IsNewCardPresent()) {return;}
  /* Chọn một trong những thẻ */
  if (!mfrc522.PICC_ReadCardSerial()) {return;}
  /* Đọc dữ liệu từ cùng một block */
  //--------------------------------------------------
  Serial.println();
  Serial.println(F("Đang đọc dữ liệu cuối cùng từ RFID..."));
  ReadDataFromBlock(blockNum, readBlockData);
  /* Nếu bạn muốn in toàn bộ bộ nhớ, hãy bỏ chú thích dòng tiếp theo */
  //mfrc522.PICC_DumpToSerial(&(mfrc522.uid));
  
  /* In dữ liệu đọc từ block */
  Serial.println();
  Serial.print(F("Dữ liệu cuối cùng trong RFID:"));
  Serial.print(blockNum);
  Serial.print(F(" --> "));
  for (int j=0 ; j<16 ; j++)
  {
    Serial.write(readBlockData[j]);
  }
  Serial.println();
  //--------------------------------------------------
  digitalWrite(BUZZER, HIGH);
  delay(200);
  digitalWrite(BUZZER, LOW);
  delay(200);
  digitalWrite(BUZZER, HIGH);
  delay(200);
  digitalWrite(BUZZER, LOW);
  //--------------------------------------------------
  
  //MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
  if (WiFi.status() == WL_CONNECTED) {
    //-------------------------------------------------------------------------------
    std::unique_ptr<BearSSL::WiFiClientSecure>client(new BearSSL::WiFiClientSecure);
    //-------------------------------------------------------------------------------
    client->setFingerprint(fingerprint);
    // Hoặc, nếu bạn muốn bỏ qua chứng chỉ SSL
    //thì sử dụng dòng sau thay vào đó:
    // client->setInsecure();
    //-----------------------------------------------------------------
    card_holder_name = sheet_url + String((char*)readBlockData);
    card_holder_name.trim();
    Serial.println(card_holder_name);
    //-----------------------------------------------------------------
    HTTPClient https;
    Serial.print(F("[HTTPS] bắt đầu...\n"));
    //-----------------------------------------------------------------

    //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    if (https.begin(*client, (String)card_holder_name)){
      //-----------------------------------------------------------------
      // HTTP
      Serial.print(F("[HTTPS] GET...\n"));
      // start connection and send HTTP header
      int httpCode = https.GET();
      //-----------------------------------------------------------------
      // httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTPS] GET... code: %d\n", httpCode);
        // file found at server
      }
      //-----------------------------------------------------------------
      else 
      {Serial.printf("[HTTPS] GET... failed, error: %s\n", https.errorToString(httpCode).c_str());}
      //-----------------------------------------------------------------
      https.end();
      delay(1000);
    }
    else {
      Serial.printf("[HTTPS] Không thể kết nối\n");
    }

  }
  